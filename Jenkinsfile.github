/*
 *
 *  MIT License
 *
 *  (C) Copyright 2023 Hewlett Packard Enterprise Development LP
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a
 *  copy of this software and associated documentation files (the "Software"),
 *  to deal in the Software without restriction, including without limitation
 *  the rights to use, copy, modify, merge, publish, distribute, sublicense,
 *  and/or sell copies of the Software, and to permit persons to whom the
 *  Software is furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included
 *  in all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
 *  THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 *  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 *  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 *  OTHER DEALINGS IN THE SOFTWARE.
 *
 */
@Library('csm-shared-library') _

def isStable = env.TAG_NAME != null ? true : false
def sleImage = 'artifactory.algol60.net/csm-docker/stable/csm-docker-sle'
def sleVersion = 'latest'

pipeline {

    agent {
        label "metal-gcp-builder"
    }

    options {
        buildDiscarder(logRotator(numToKeepStr: "10"))
        disableConcurrentBuilds()
        timeout(time: 20, unit: 'MINUTES')
        timestamps()
    }

    environment {
        NAME = getRepoName()
        VERSION = sh(returnStdout: true, script: "cat .version").trim()
        BUILD = sh(returnStdout: true, script: "git describe --tags | tr -s '-' '~' | sed 's/^v//'").trim()
    }

    stages {

        stage('Build & Publish RPM') {

            matrix {

                axes {
                    axis {
                        name 'ARCH'
                        values 'aarch64', 'x86_64'
                    }

                    axis {
                        name 'sleVersion'
                        values '15.4'
                    }

                }

                environment {
                  DOCKER_ARCH = "${env.ARCH == "x86_64" ? "amd64" : "arm64"}"
                }

                agent {
                    node {
                        label "metal-gcp-builder"
                        customWorkspace "${env.WORKSPACE}/${ARCH}/${SLEVERSION}"
                    }
                }

                stages {
                    stage('Prepare: Install go') {
                        agent {
                            docker {
                                label 'docker'
                                reuseNode true
                                args "--platform linux/${env.DOCKER_ARCH}"
                                image "${sleImage}:${sleVersion}"
                            }
                        }
                        steps {
                            sh "make install_go"
                        }
                    }


                    stage('Prepare: RPMs') {
                        agent {
                            docker {
                                label 'docker'
                                reuseNode true
                                args "--platform linux/${env.DOCKER_ARCH}"
                                image "${sleImage}:${sleVersion}"
                            }
                        }
                        steps {
                            runLibraryScript("addRpmMetaData.sh", "${env.NAME}.spec")
                            sh "git update-index --assume-unchanged ${env.NAME}.spec"
                            sh "make rpm_prepare"
                        }
                    }

                    stage('Build: RPMs') {
                        agent {
                            docker {
                                label 'docker'
                                reuseNode true
                                args "--platform linux/${env.DOCKER_ARCH}"
                                image "${sleImage}:${sleVersion}"
                            }
                        }
                        steps {
                            sh "make rpm"
                        }
                    }

                    stage('Publish: RPMs') {
                        steps {
                            script {
                                publishCsmRpms(
                                        arch: "${ARCH}",
                                        component: env.NAME,
                                        isStable: isStable,
                                        os: "noos",
                                        pattern: "dist/rpmbuild/RPMS/${arch}/*.rpm",
                                )
                                publishCsmRpms(
                                        arch: "src",
                                        component: env.NAME,
                                        isStable: isStable,
                                        os: "noos",
                                        pattern: "dist/rpmbuild/SRPMS/*.rpm",
                                )
                            }
                        }
                    }
                }
            }
        }

        stage('Build & Publish Docker Image'){

            stages {

                stage('Build Docker Image') {
                    steps {
                        sh "make dockerimage"
                    }
                }

                stage("Publish Docker Image") {
                    steps {
                        script {
                            publishCsmDockerImage(image: env.NAME, tag: env.VERSION, isStable: isStable)
                        }
                    }
                }

            }

        }

        stage('Build & Publish Helm Chart'){

            stages {

                stage('Build Helm Chart') {
                    steps {
                        sh "make chart"
                    }
                }

                stage("Publish Chart") {
                    steps {
                        script {
                            publishCsmHelmCharts(component: env.NAME, chartsPath: "${WORKSPACE}/packages", isStable: isStable)
                        }
                    }
                }

            }

        }

    }
}
